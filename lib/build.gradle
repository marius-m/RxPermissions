apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"
apply plugin: 'me.tatarka.retrolambda'

def siteUrl = 'https://github.com/pietroleggero/RxPermissions'
def gitUrl = 'https://github.com/pietroleggero/RxPermissions.git'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	user = properties.getProperty("bintray.user")
	key = properties.getProperty("bintray.apikey")

	configurations = ['archives']
	pkg {
		repo = "maven"
		name = "RxPermissions"
		websiteUrl = siteUrl
		vcsUrl = gitUrl
		licenses = ["Apache-2.0"]
		publish = true
	}
}

android {
	compileSdkVersion 23
	buildToolsVersion '27.0.3'

	defaultConfig {
		minSdkVersion 11
		targetSdkVersion 23
		versionCode 2
		version = '1.0.2'
		group = 'com.devdoo.rxpermissions'
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	testOptions.unitTests.all {
		// unitTests.returnDefaultValues = true
		// Always show the result of every unit test, even if it passes.
		testLogging {
			events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		}
	}
}




install {
	repositories.mavenInstaller {
		pom {
			project {
				packaging 'aar'
				name 'RxPermissions An easy way to request Android M permission using rxjava'
				url siteUrl
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id 'devdoo'
						name 'devdoo'
						email 'devdooteam@gmail.com'
					}
				}
				scm {
					connection gitUrl
					developerConnection gitUrl
					url siteUrl

				}
			}
		}
	}
}

dependencies {
	compile 'com.android.support:appcompat-v7:23.1.0'
	compile 'junit:junit:4.12'
	compile 'io.reactivex:rxjava:1.0.14'
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

task javadoc(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
artifacts {
	archives javadocJar
	archives sourcesJar
}

task findConventions << {
	println project.getConvention()
}
